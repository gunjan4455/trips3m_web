// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NavBar: Render Correctly  should match with the previous snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NavBar
    options={Array []}
    trackSegment={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Sticky
        activeClass="active"
        bottomBoundary={0}
        enableTransforms={true}
        enabled={true}
        innerZ={4}
        onStateChange={null}
        releasedClass="released"
        shouldFreeze={[Function]}
        top={0}
      >
        <DetailNav
          options={Array []}
          trackSegment={[Function]}
        />
      </Sticky>,
      "className": "mt8",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeClass": "active",
        "bottomBoundary": 0,
        "children": <DetailNav
          options={Array []}
          trackSegment={[Function]}
        />,
        "enableTransforms": true,
        "enabled": true,
        "innerZ": 4,
        "onStateChange": null,
        "releasedClass": "released",
        "shouldFreeze": [Function],
        "top": 0,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "options": Array [],
          "trackSegment": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Sticky
          activeClass="active"
          bottomBoundary={0}
          enableTransforms={true}
          enabled={true}
          innerZ={4}
          onStateChange={null}
          releasedClass="released"
          shouldFreeze={[Function]}
          top={0}
        >
          <DetailNav
            options={Array []}
            trackSegment={[Function]}
          />
        </Sticky>,
        "className": "mt8",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activeClass": "active",
          "bottomBoundary": 0,
          "children": <DetailNav
            options={Array []}
            trackSegment={[Function]}
          />,
          "enableTransforms": true,
          "enabled": true,
          "innerZ": 4,
          "onStateChange": null,
          "releasedClass": "released",
          "shouldFreeze": [Function],
          "top": 0,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "options": Array [],
            "trackSegment": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
